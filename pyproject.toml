[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "hatch-vcs"]

[project]
authors = [{name = "Remi Gau"}]
dependencies = [
    "numpy~=1.26.4",
    "pandas",
    "Jinja2",
    'loguru',
    "rich_argparse",
    "ruamel.yaml"
]
description = "Statistical learning for neuroimaging in Python"
# Version from setuptools_scm
dynamic = ["version"]
license = {text = "GPL 3.0"}
maintainers = [{name = "Remi Gau", email = "remi.gau2@mcgill.ca"}]
name = "ecobidas"
readme = "README.md"
requires-python = ">=3.8"

[project.optional-dependencies]
dev = [
    'tox'
]
test = [
    "coverage",
    "pytest>=6.0.0",
    "pytest-cov"
]

[project.scripts]
ecobidas = "ecobidas.cli:cli"

[tool.codespell]
ignore-words-list = "jist,softwares,te,fwe,als,nd"
skip = "./.git,*.svg,reproschema-ui,node_modules,env,reproschema-py,htmlcov,package-lock.json,ecobidas/inputs/neurovault/neurovault.tsv"

[tool.hatch.build.hooks.vcs]
version-file = "ecobidas/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["ecobidas"]

[tool.hatch.version]
source = "vcs"

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
enable_error_code = ["ignore-without-code", "redundant-expr"]  # "truthy-bool"
no_implicit_optional = true
show_error_codes = true
# strict = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
    "ecobidas._version",
    "rich_argparse",
    "loguru",
    "reproschema.*",
    "rich",
    "ruamel.yaml"
]

[[tool.mypy.overrides]]
ignore_errors = true
module = ['tests.*']

[tool.pytest.ini_options]
addopts = "-ra --strict-config --strict-markers --doctest-modules --showlocals -s -v --ignore=tools --ignore=reproschema-py --ignore=cobidas_schema --ignore=artemis_schema"
doctest_optionflags = "NORMALIZE_WHITESPACE ELLIPSIS"
junit_family = "xunit2"
minversion = "6.0"
xfail_strict = true

[tool.ruff]
indent-width = 4
line-length = 100

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = "dynamic"
indent-style = "space"
line-ending = "auto"
quote-style = "double"
skip-magic-trailing-comma = false

[tool.ruff.lint]
fixable = ["ALL"]
ignore = [
    "ARG005",
    "B904",
    "D100",
    "D101",
    "D102",
    "D103",
    "D105",
    "D205",
    "D301",
    "E741",
    "ERA001",
    "FURB105",
    "PD901",  # https://github.com/astral-sh/ruff/issues/7710
    "N803",
    "N806",
    "PIE790",
    "PLR2004",
    "UP038",  # https://github.com/astral-sh/ruff/issues/7871
    "RUF005",
    # Avoid linter rules conflicting with the formatter
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "COM812",
    "COM819",
    "E111",
    "E114",
    "E117",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "W191"
]
# List of all the ruff rules (includes why the rule matters)
# https://docs.astral.sh/ruff/rules/
select = [
    "ARG",
    "B",
    "C4",
    "C90",
    "D",
    "E",
    "ERA",
    "F",
    "FLY",
    "FURB",
    "I",
    "N",
    "NPY",
    "PERF",
    "PIE",
    "PTH",
    "PD",
    "PGH",
    "PLR",
    "RUF",
    "SIM",
    "UP",
    "W"
]
unfixable = []

[tool.ruff.lint.mccabe]
max-complexity = 23

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104", "E402"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pylint]
# https://docs.astral.sh/ruff/settings/#lint_pylint_max-args
max-args = 27
# https://docs.astral.sh/ruff/settings/#lint_pylint_max-branches
max-branches = 22
# https://docs.astral.sh/ruff/settings/#lint_pylint_max-returns
max-returns = 8
# https://docs.astral.sh/ruff/settings/#lint_pylint_max-statements
max-statements = 93
